generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? @db.Text
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  expires_at        Int?
  refresh_token     String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model admin {
  id        String     @id
  name      String?
  email     String     @unique(map: "Admin_email_key")
  password  String
  createdAt DateTime   @default(now())
  updatedAt DateTime
  role      admin_role @default(STANDARD)
}

model customers {
  id                      Int     @id @default(autoincrement())
  name                    String  @db.VarChar(255)
  username                String  @db.VarChar(255)
  email                   String  @db.VarChar(255)
  password                String  @db.VarChar(255)
  tenant_id               String  @db.VarChar(255)
  phone                   String? @db.VarChar(255)
  mobile                  String? @db.VarChar(255)
  fms_user_id             Int?
  selected_systems        String? @db.VarChar(255)
  fms_branch              String? @db.VarChar(255)
  fms_user_role_id        Int?
  wms_user_id             Int?
  wms_user_role_id        Int?
  crm_user_id             Int?
  crm_user_role_id        Int?
  tms_user_id             Int?
  tms_user_role_id        Int?
  access                  String? @db.VarChar(255)
  teams                   String? @db.VarChar(255)
  systems_with_permission String? @db.VarChar(255)
  status                  Int?
  adminId                 String? @db.VarChar(255)
  ams_user_id             Int?
  ams_user_role_id        String? @db.VarChar(255)
  qcms_user_id            Int?
  qcms_user_role_id       String? @db.VarChar(255)
  tsms_user_id            Int?
  tsms_user_role_id       String? @db.VarChar(255)
  tdms_user_id            Int?
  tdms_user_role_id       String? @db.VarChar(255)
  hr_user_id              Int?
  hr_user_role_id         String? @db.VarChar(255)
  chatess_user_id         Int?
  chatess_user_role_id    String? @db.VarChar(255)
  chatess_workspace       String? @db.VarChar(255)
}

model notification {
  id        String   @id
  userId    String?
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime
  user      user?    @relation(fields: [userId], references: [id], map: "Notification_userId_fkey")

  @@index([userId], map: "Notification_userId_fkey")
}

model payment {
  id        String   @id
  userId    String
  amount    Float
  currency  String
  status    String
  method    String
  orderId   String
  createdAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id], map: "Payment_userId_fkey")

  @@index([userId], map: "Payment_userId_fkey")
}

model paypalwebhook {
  id        String   @id
  eventId   String   @unique(map: "PayPalWebhook_eventId_key")
  eventType String
  payload   String   @db.Text
  createdAt DateTime @default(now())
}

model plan {
  id           String   @id
  name         String
  description  String
  price        Float
  features     String   @db.LongText
  createdAt    DateTime @default(now())
  paypalPlanId String?
  systems      String?  @db.LongText
  user         user[]
}

model report {
  id        String   @id
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String?
  userName  String?
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model system {
  id   String @id
  name String @unique(map: "System_name_key")
}

model tenants {
  id       String @id
  email    String @unique(map: "Tenants_email_key")
  tenantId String @unique(map: "Tenants_tenantId_key")
  user     user   @relation(fields: [email], references: [email], map: "Tenants_email_fkey")
}

model user {
  id                   String         @id
  name                 String?
  email                String         @unique(map: "User_email_key")
  emailVerified        DateTime?
  image                String?        @db.Text
  password             String?
  tenantId             String?        @unique(map: "User_tenantId_key")
  createdAt            DateTime       @default(now())
  updatedAt            DateTime
  cardBrand            String?
  cardLast4            String?
  planId               String?
  planActivatedAt      DateTime?
  planExpiresAt        DateTime?
  paypalSubscriptionId String?        @unique(map: "User_paypalSubscriptionId_key")
  lastLoginAt          DateTime?
  systems              String?        @db.LongText
  merchantReference    String?
  payfortCardTokenName String?
  account              account[]
  notification         notification[]
  payment              payment[]
  session              session[]
  tenants              tenants?
  plan                 plan?          @relation(fields: [planId], references: [id], map: "User_planId_fkey")

  @@index([planId], map: "User_planId_fkey")
}

model verificationtoken {
  id         String   @id
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime
}

enum admin_role {
  SUPER_ADMIN
  STANDARD
}
