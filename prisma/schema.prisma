generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // fields for plan management
  planId         String?   // Foreign key to Plan
  planActivatedAt DateTime?
  planExpiresAt  DateTime?
  paypalSubscriptionId String? @unique

  lastLoginAt           DateTime?
  systems        UserSystem[]

  accounts       Account[]
  sessions       Session[]
  plan           Plan?     @relation(fields: [planId], references: [id])

  payments       Payment[] 
  notifications  Notification[] // Relation to Notification model
}

model Notification {
  id          String   @id @default(cuid())
  userId      String?    
  title       String
  message     String    @db.Text
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User?      @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // Keep as "oauth" for OAuth providers like Google/Facebook
  provider          String
  providerAccountId String  // Unique identifier for the provider account
  access_token      String? @db.Text // OAuth access token
  token_type        String? // OAuth token type
  scope             String? // OAuth scope
  id_token          String? @db.Text // OAuth ID token
  expires_at        Int?    // OAuth token expiration time (if available)
  refresh_token     String? @db.Text // OAuth refresh token

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  identifier String  // email
  token     String   @unique
  expires   DateTime
}

model Plan {
  id          String   @id
  name        String
  description String
  price       Float    // store as number
  features    Json 
  createdAt   DateTime @default(now())
  paypalPlanId String?

  users       User[]
  systems     PlanSystem[]
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  currency    String   // e.g., "USD"
  status      String   // e.g., "COMPLETED", "FAILED"
  method      String   // e.g., "paypal"
  orderId     String   // PayPal order ID
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}

model PayPalWebhook {
  id        String   @id @default(cuid())
  eventId   String   @unique
  eventType String
  payload   String   @db.Text
  createdAt DateTime @default(now())
}

model Report {
  id        String   @id @default(cuid())
  title     String
  message   String   @db.Text
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  userId    String?     
  userName  String?                 
}


model Admin {
  id           String   @id @default(cuid())
  name         String?
  email        String   @unique
  password     String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  role         Role     @default(STANDARD)
}

enum Role {
  SUPER_ADMIN
  STANDARD
}

model System {
  id     String   @id @default(cuid())
  name   String   @unique
  users  UserSystem[]
  plans  PlanSystem[]
}

model UserSystem {
  id       String @id @default(cuid())
  userId   String
  systemId String

  user     User   @relation(fields: [userId], references: [id])
  system   System @relation(fields: [systemId], references: [id])

  @@unique([userId, systemId])
}

model PlanSystem {
  id       String @id @default(cuid())
  planId   String
  systemId String

  plan     Plan   @relation(fields: [planId], references: [id])
  system   System @relation(fields: [systemId], references: [id])

  @@unique([planId, systemId])
}
