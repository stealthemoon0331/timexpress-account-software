generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  image          String?
  password       String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // New fields for plan management
  planId         String?   // Foreign key to Plan
  planActivatedAt DateTime?
  planExpiresAt  DateTime?

  accounts       Account[]
  sessions       Session[]
  plan           Plan?     @relation(fields: [planId], references: [id])

  payments       Payment[] 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String  // Keep as "oauth" for OAuth providers like Google/Facebook
  provider          String
  providerAccountId String  // Unique identifier for the provider account
  access_token      String? @db.Text // OAuth access token
  token_type        String? // OAuth token type
  scope             String? // OAuth scope
  id_token          String? @db.Text // OAuth ID token
  expires_at        Int?    // OAuth token expiration time (if available)
  refresh_token     String? @db.Text // OAuth refresh token

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id])
}

model VerificationToken {
  id        String   @id @default(cuid())
  identifier String  // email
  token     String   @unique
  expires   DateTime
}

model Plan {
  id          String   @id
  name        String
  description String
  price       Float    // store as number
  features    String   @db.Text // Prisma currently doesn't support arrays in MySQL natively, so store as JSON if needed
  createdAt   DateTime @default(now())

  users       User[]
}

model Payment {
  id          String   @id @default(cuid())
  userId      String
  amount      Float
  currency    String   // e.g., "USD"
  status      String   // e.g., "COMPLETED", "FAILED"
  method      String   // e.g., "paypal"
  orderId     String   // PayPal order ID
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id])
}



